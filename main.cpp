#include<DirectXMath.h>
using namespace DirectX;

#include <d3dcompiler.h>
#pragma comment(lib,"d3dcompiler.lib")


#include"DXInitialize.h"
#include"Input.h"
#include"DXWindow.h"





//Windowsアプリでのエントリーポイント(main関数)
int WINAPI WinMain(HINSTANCE, HINSTANCE, LPSTR, int)
{
	//ウィンドウ作成コンストラクタ
	DXWindow _window;
#ifdef _DEBUG
	//デバッグレイヤーをオンに
	ID3D12Debug* debugController;
	if (SUCCEEDED(D3D12GetDebugInterface(IID_PPV_ARGS(&debugController))))
	{
		debugController->EnableDebugLayer();
	}
	
#endif	
	HRESULT result;
	//DirectX初期化処理
	DXInitialize* dxInitialize=new DXInitialize(_window.hwnd);
	//入力関数
	Input* _input=new Input(_window.w,_window.hwnd);
#pragma region	描画初期化処理


#pragma region 頂点バッファの確保
	//頂点データ
	XMFLOAT3 vertices[] =
	{
		{-0.5f,-0.5f,0.0f},
		{-0.5f,+0.5f,0.0f},
		{+0.5f,-0.5f,0.0f},
	};

	//頂点データ全体のサイズ=頂点データ一つ分のサイズ*頂点データの要素数
	UINT sizeVB = static_cast<UINT>(sizeof(XMFLOAT3) * _countof(vertices));

	//頂点バッファの設定
	D3D12_HEAP_PROPERTIES heapProp{};		//ヒープ設定
	heapProp.Type =D3D12_HEAP_TYPE_UPLOAD;	//GPUへの転送用
	//リソース設定
	D3D12_RESOURCE_DESC	resDesc{};
	resDesc.Dimension = D3D12_RESOURCE_DIMENSION_BUFFER;
	resDesc.Width = sizeVB;					//頂点データ全体のサイズ
	resDesc.Height = 1;
	resDesc.DepthOrArraySize = 1;
	resDesc.MipLevels = 1;
	resDesc.SampleDesc.Count = 1;
	resDesc.Layout = D3D12_TEXTURE_LAYOUT_ROW_MAJOR;

	//頂点バッファの生成
	ID3D12Resource* vertBuff = nullptr;
	result = dxInitialize->device->CreateCommittedResource
	(
		&heapProp,
		D3D12_HEAP_FLAG_NONE,
		&resDesc,
		D3D12_RESOURCE_STATE_GENERIC_READ,
		nullptr,
		IID_PPV_ARGS(&vertBuff)
	);
	assert(SUCCEEDED(result));
#pragma endregion 頂点バッファの確保

#pragma region 頂点バッファへのデータ転送
	//GPU上のバッファに対応した仮想メモリ(メインメモリ上)を取得
	XMFLOAT3* vertMap = nullptr;
	result = vertBuff->Map(0, nullptr, (void**)&vertMap);
	assert(SUCCEEDED(result));
	//全頂点に対して
	for (int i = 0; i < _countof(vertices); i++)
	{
		vertMap[i] = vertices[i]; //座標をコピー
	}
	//繋がりを解除
	vertBuff->Unmap(0, nullptr);
#pragma endregion 頂点バッファへのデータ転送


#pragma region 頂点バッファビュー
	//頂点バッファビューの作成
	D3D12_VERTEX_BUFFER_VIEW vbView{};
	//GPU仮想アドレス
	vbView.BufferLocation = vertBuff->GetGPUVirtualAddress();
	//頂点バッファのサイズ
	vbView.SizeInBytes = sizeVB;
	//頂点1つ分のデータサイズ
	vbView.StrideInBytes = sizeof(XMFLOAT3);

#pragma endregion 頂点バッファビュー

#pragma region	頂点シェーダファイルの読み込みとコンパイル

	ID3DBlob* vsBlob = nullptr; //頂点シェーダーオブジェクト
	ID3DBlob* psBlob = nullptr; //ピクセルシェーダーオブジェクト
	ID3DBlob* errorBlob = nullptr; //エラーオブジェクト

	//頂点シェーダーの読み込みとコンパイル
	result = D3DCompileFromFile(
		L"BasicVS.hlsl", //シェーダーファイル名
		nullptr,
		D3D_COMPILE_STANDARD_FILE_INCLUDE, //インクルード可能にする
		"main", "vs_5_0", //エントリーポイント名,シェーダーモデル指定
		D3DCOMPILE_DEBUG | D3DCOMPILE_SKIP_OPTIMIZATION, //デバッグ用設定
		0,
		&vsBlob, &errorBlob);

	//エラーなら
	if (FAILED(result))
	{
		//errorBlobからエラー内容をstring型にコピー
		std::string error;
		error.resize(errorBlob->GetBufferSize());

		std::copy_n((char*)errorBlob->GetBufferPointer(),errorBlob->GetBufferSize(), error.begin());

		error += "\n";
		//エラー内容を出力ウィンドウに表示
		OutputDebugStringA(error.c_str());
		assert(0);
	}

#pragma endregion	頂点シェーダファイルの読み込みとコンパイル

#pragma region	ピクセルシェーダファイルの読み込みとコンパイル

	//ピクセルシェーダファイルの読み込みとコンパイル
	result = D3DCompileFromFile(
		L"BasicPS.hlsl", //シェーダーファイル名
		nullptr,
		D3D_COMPILE_STANDARD_FILE_INCLUDE, //インクルード可能にする
		"main", "ps_5_0", //エントリーポイント名,シェーダーモデル指定
		D3DCOMPILE_DEBUG | D3DCOMPILE_SKIP_OPTIMIZATION, //デバッグ用設定
		0,
		&psBlob, &errorBlob);

	//エラーなら
	if (FAILED(result))
	{
		//errorBlobからエラー内容をstring型にコピー
		std::string error;
		error.resize(errorBlob->GetBufferSize());

		std::copy_n((char*)errorBlob->GetBufferPointer(), errorBlob->GetBufferSize(), error.begin());

		error += "\n";
		//エラー内容を出力ウィンドウに表示
		OutputDebugStringA(error.c_str());
		assert(0);
	}



#pragma endregion	ピクセルシェーダファイルの読み込みとコンパイル


	//頂点レイアウト
	D3D12_INPUT_ELEMENT_DESC inputLayout[] = { {"POSITION",0,DXGI_FORMAT_R32G32B32_FLOAT,0,D3D12_APPEND_ALIGNED_ELEMENT,D3D12_INPUT_CLASSIFICATION_PER_VERTEX_DATA,0}, };


#pragma region グラフィックスパイプライン

	//グラフィックスパイプライン設定
	D3D12_GRAPHICS_PIPELINE_STATE_DESC pipelineDesc{};

	//シェーダーの設定
	pipelineDesc.VS.pShaderBytecode = vsBlob->GetBufferPointer();
	pipelineDesc.VS.BytecodeLength = vsBlob->GetBufferSize();
	pipelineDesc.PS.pShaderBytecode = psBlob->GetBufferPointer();
	pipelineDesc.PS.BytecodeLength = psBlob->GetBufferSize();

	//サンプルマスクの設定
	pipelineDesc.SampleMask = D3D12_DEFAULT_SAMPLE_MASK; //標準設定

	//ラスタライザの設定
	pipelineDesc.RasterizerState.CullMode = D3D12_CULL_MODE_NONE; //カリングしない
	pipelineDesc.RasterizerState.FillMode = D3D12_FILL_MODE_SOLID; //ポリゴン内塗りつぶし
	
	pipelineDesc.RasterizerState.DepthClipEnable = true;	//深度クリッピングを有効に

	//ブレンドステート
	pipelineDesc.BlendState.RenderTarget[0].RenderTargetWriteMask = D3D12_COLOR_WRITE_ENABLE_ALL; //RGBA全てのチャンネルを描画

	//頂点レイアウトの設定
	pipelineDesc.InputLayout.pInputElementDescs = inputLayout;
	pipelineDesc.InputLayout.NumElements = _countof(inputLayout);

	//図形の形状設定
	pipelineDesc.PrimitiveTopologyType = D3D12_PRIMITIVE_TOPOLOGY_TYPE_TRIANGLE;

	//その他の設定
	pipelineDesc.NumRenderTargets = 1; // 描画対象は1つ
	pipelineDesc.RTVFormats[0] = DXGI_FORMAT_R8G8B8A8_UNORM_SRGB;	//0〜255指定のRGBA
	pipelineDesc.SampleDesc.Count = 1;	//1ピクセルにつき1回サンプリング

	//ルートシグネチャ
	ID3D12RootSignature* rootSignature;
	
	//ルートシグネチャの設定
	D3D12_ROOT_SIGNATURE_DESC rootSignatureDesc{};
	rootSignatureDesc.Flags = D3D12_ROOT_SIGNATURE_FLAG_ALLOW_INPUT_ASSEMBLER_INPUT_LAYOUT;
	
	//ルートシグネチャのシリアライズ
	ID3DBlob* rootSigBlob = nullptr;
	result = D3D12SerializeRootSignature(&rootSignatureDesc, D3D_ROOT_SIGNATURE_VERSION_1_0, &rootSigBlob, &errorBlob);
	assert(SUCCEEDED(result));
	result = dxInitialize->device->CreateRootSignature(0, rootSigBlob->GetBufferPointer(), rootSigBlob->GetBufferSize(), IID_PPV_ARGS(&rootSignature));
	assert(SUCCEEDED(result));
	rootSigBlob->Release();
	
	//パイプラインにルートシグネチャをセット
	pipelineDesc.pRootSignature = rootSignature;

	//パイプラインステートの生成
	ID3D12PipelineState* pipelineState = nullptr;
	result = dxInitialize->device->CreateGraphicsPipelineState(&pipelineDesc, IID_PPV_ARGS(&pipelineState));
	assert(SUCCEEDED(result));

#pragma endregion	グラフィックスパイプライン

#pragma region グラフィックスパイプライン2

	//グラフィックスパイプライン設定
	D3D12_GRAPHICS_PIPELINE_STATE_DESC pipelineDesc2{};

	//シェーダーの設定
	pipelineDesc2.VS.pShaderBytecode = vsBlob->GetBufferPointer();
	pipelineDesc2.VS.BytecodeLength = vsBlob->GetBufferSize();
	pipelineDesc2.PS.pShaderBytecode = psBlob->GetBufferPointer();
	pipelineDesc2.PS.BytecodeLength = psBlob->GetBufferSize();

	//サンプルマスクの設定
	pipelineDesc2.SampleMask = D3D12_DEFAULT_SAMPLE_MASK; //標準設定

	//ラスタライザの設定
	pipelineDesc2.RasterizerState.CullMode = D3D12_CULL_MODE_NONE; //カリングしない
	
	pipelineDesc2.RasterizerState.FillMode = D3D12_FILL_MODE_WIREFRAME; //ワイヤーフレーム(どちらか片方)
	pipelineDesc2.RasterizerState.DepthClipEnable = true;	//深度クリッピングを有効に

	//ブレンドステート
	pipelineDesc2.BlendState.RenderTarget[0].RenderTargetWriteMask = D3D12_COLOR_WRITE_ENABLE_ALL; //RGBA全てのチャンネルを描画

	//頂点レイアウトの設定
	pipelineDesc2.InputLayout.pInputElementDescs = inputLayout;
	pipelineDesc2.InputLayout.NumElements = _countof(inputLayout);

	//図形の形状設定
	pipelineDesc2.PrimitiveTopologyType = D3D12_PRIMITIVE_TOPOLOGY_TYPE_TRIANGLE;

	//その他の設定
	pipelineDesc2.NumRenderTargets = 1; // 描画対象は1つ
	pipelineDesc2.RTVFormats[0] = DXGI_FORMAT_R8G8B8A8_UNORM_SRGB;	//0〜255指定のRGBA
	pipelineDesc2.SampleDesc.Count = 1;	//1ピクセルにつき1回サンプリング

	//ルートシグネチャ
	ID3D12RootSignature* rootSignature2;

	//ルートシグネチャの設定
	D3D12_ROOT_SIGNATURE_DESC rootSignatureDesc2{};
	rootSignatureDesc2.Flags = D3D12_ROOT_SIGNATURE_FLAG_ALLOW_INPUT_ASSEMBLER_INPUT_LAYOUT;

	//ルートシグネチャのシリアライズ
	ID3DBlob* rootSigBlob2 = nullptr;
	result = D3D12SerializeRootSignature(&rootSignatureDesc2, D3D_ROOT_SIGNATURE_VERSION_1_0, &rootSigBlob2, &errorBlob);
	assert(SUCCEEDED(result));
	result = dxInitialize->device->CreateRootSignature(0, rootSigBlob2->GetBufferPointer(), rootSigBlob2->GetBufferSize(), IID_PPV_ARGS(&rootSignature2));
	assert(SUCCEEDED(result));
	rootSigBlob2->Release();

	//パイプラインにルートシグネチャをセット
	pipelineDesc2.pRootSignature = rootSignature2;

	//パイプラインステートの生成
	ID3D12PipelineState* pipelineState2 = nullptr;
	result = dxInitialize->device->CreateGraphicsPipelineState(&pipelineDesc2, IID_PPV_ARGS(&pipelineState2));
	assert(SUCCEEDED(result));

#pragma endregion	グラフィックスパイプライン2

#pragma endregion	描画初期化処理


	//変数初期化場所
	float color_Blue = 0.5f;
	float color_Red = 0.1f;
	float color_Green = 0.25f;

	bool S = false;

	//ゲームループ
	while (true)
	{
		//メッセージある？
		if (PeekMessage(&_window.msg, nullptr, 0, 0, PM_REMOVE))
		{
			TranslateMessage(&_window.msg);	//キー入力メッセージの処理
			DispatchMessage(&_window.msg);	//プロシージャにメッセージを送る
		}

		//×ボタンで終了メッセージが来たらゲームループを抜ける
		if (_window.msg.message == WM_QUIT)
		{
			break;
		}
		#pragma region DirectX毎フレーム
		//DirecX毎フレーム　ここから　　ー−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−ー−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−
		
		_input->InputUpdate();
		

		if (_input->GetKey(DIK_SPACE))
		{
			color_Red = 1.0f;
		}
		else
		{
			color_Red = 0.1f;
		}
		if (_input->GetPressKey(DIK_2))
		{
			switch (S)
			{
			case 0:
				S = true;

				break;
			case 1:
				S = false;


			}
		}

		//バックバッファの番号を取得(2つなので0番か1番)
		UINT bbIndex = dxInitialize->swapChain->GetCurrentBackBufferIndex();

		//1.リソースバリアで書き込み可能に変更
		D3D12_RESOURCE_BARRIER barrierDesc{};
		barrierDesc.Transition.pResource = dxInitialize->backBuffers[bbIndex];				//バックバッファを指定
		barrierDesc.Transition.StateBefore = D3D12_RESOURCE_STATE_PRESENT;		//表示状態から
		barrierDesc.Transition.StateAfter = D3D12_RESOURCE_STATE_RENDER_TARGET;	//描画状態へ
		dxInitialize->commandList->ResourceBarrier(1, &barrierDesc);

		//2. 描画先の変更
		//レンダーターゲットビューのハンドルを取得
		D3D12_CPU_DESCRIPTOR_HANDLE rtvHandle = dxInitialize->rtvHeap->GetCPUDescriptorHandleForHeapStart();
		rtvHandle.ptr += bbIndex * dxInitialize->device->GetDescriptorHandleIncrementSize(dxInitialize->rtvHeapDesc.Type);
		dxInitialize->commandList->OMSetRenderTargets(1, &rtvHandle, false, nullptr);

		//3. 画面クリア
		FLOAT clearColor[] = { color_Red,color_Green,color_Blue,0.0f };	//色の指定はRGBAの0.0f〜1.0f
		
		dxInitialize->commandList->ClearRenderTargetView(rtvHandle, clearColor, 0, nullptr);
	#pragma region 描画コマンド
		//--------------4.描画コマンド　ここから---------------//
		
		 //ビューポート設定コマンド
		D3D12_VIEWPORT viewport{};
		viewport.Width = window_width -window_width/3;
		viewport.Height = window_height- window_height/3;
		viewport.TopLeftX = 0;
		viewport.TopLeftY = 0;
		viewport.MinDepth = 0.0f;
		viewport.MaxDepth = 1.0f;

		//ビューポート設定コマンドを、コマンドリストに積む
		dxInitialize->commandList->RSSetViewports(1, &viewport);

		

		//シザー矩形
		D3D12_RECT scissorRect{};
		scissorRect.left = 0;										//切り抜き座標左
		scissorRect.right = scissorRect.left + window_width;		//切り抜き座標右
		scissorRect.top = 0;										//切り抜き座標上
		scissorRect.bottom = scissorRect.top + window_height;		//切り抜き座標下
		
		//シザー矩形設定コマンドを、コマンドリストに積む
		dxInitialize->commandList->RSSetScissorRects(1, &scissorRect);

		//パイプラインステートとルートシグネチャの設定コマンド
		
		if (S)
		{
			dxInitialize->commandList->SetPipelineState(pipelineState2);
			dxInitialize->commandList->SetGraphicsRootSignature(rootSignature2);
		}
		else if(!S)
		{
			dxInitialize->commandList->SetPipelineState(pipelineState);
			dxInitialize->commandList->SetGraphicsRootSignature(rootSignature);
		}
		//プリミティブ形状の設定コマンド
		dxInitialize->commandList->IASetPrimitiveTopology(D3D_PRIMITIVE_TOPOLOGY_TRIANGLELIST);	//三角形リスト

		//頂点バッファビューの設定コマンド
		dxInitialize->commandList->IASetVertexBuffers(0, 1, &vbView);

		//描画コマンド
		dxInitialize->commandList->DrawInstanced(_countof(vertices), 1, 0, 0);	//全ての頂点を使って描画

		//ビューポート設定コマンド
		D3D12_VIEWPORT viewport2{};
		viewport2.Width = window_width / 3;
		viewport2.Height = window_height - window_height / 3;
		viewport2.TopLeftX = window_width - window_width / 3;
		viewport2.TopLeftY = 0;
		viewport2.MinDepth = 0.0f;
		viewport2.MaxDepth = 1.0f;

		//ビューポート設定コマンドを、コマンドリストに積む
		dxInitialize->commandList->RSSetViewports(1, &viewport2);

		dxInitialize->commandList->DrawInstanced(_countof(vertices), 1, 0, 0);	//全ての頂点を使って描画

		//ビューポート設定コマンド
		D3D12_VIEWPORT viewport3{};
		viewport3.Width = window_width - window_width / 3;
		viewport3.Height = window_height / 3;
		viewport3.TopLeftX =0;
		viewport3.TopLeftY = window_height-window_height/3;
		viewport3.MinDepth = 0.0f;
		viewport3.MaxDepth = 1.0f;

		//ビューポート設定コマンドを、コマンドリストに積む
		dxInitialize->commandList->RSSetViewports(1, &viewport3);

		dxInitialize->commandList->DrawInstanced(_countof(vertices), 1, 0, 0);	//全ての頂点を使って描画

		//ビューポート設定コマンド
		D3D12_VIEWPORT viewport4{};
		viewport4.Width = window_width / 3;
		viewport4.Height = window_height / 3;
		viewport4.TopLeftX = window_width - window_width / 3;
		viewport4.TopLeftY = window_height - window_height / 3;
		viewport4.MinDepth = 0.0f;
		viewport4.MaxDepth = 1.0f;

		//ビューポート設定コマンドを、コマンドリストに積む
		dxInitialize->commandList->RSSetViewports(1, &viewport4);

		dxInitialize->commandList->DrawInstanced(_countof(vertices), 1, 0, 0);	//全ての頂点を使って描画

		//--------------4.描画コマンド　ここまで---------------//
	#pragma endregion 描画コマンド
		//5. リソースバリアを戻す
		barrierDesc.Transition.StateBefore = D3D12_RESOURCE_STATE_RENDER_TARGET;	//描画状態から
		barrierDesc.Transition.StateAfter = D3D12_RESOURCE_STATE_PRESENT;			//表示状態へ
		dxInitialize->commandList->ResourceBarrier(1, &barrierDesc);

		//命令のクローズ
		result = dxInitialize->commandList->Close();
		assert(SUCCEEDED(result));
		//コマンドリストの実行
		ID3D12CommandList* commandLists[] = { dxInitialize->commandList };
		dxInitialize->commandQueue->ExecuteCommandLists(1, commandLists);

		//画面に表示するバッファをフリップ(裏表の入れ替え)
		result = dxInitialize->swapChain->Present(1, 0);
		assert(SUCCEEDED(result));

		//コマンドの実行完了を待つ
		dxInitialize->commandQueue->Signal(dxInitialize->fence, ++dxInitialize->fenceVal);
		if (dxInitialize->fence->GetCompletedValue() != dxInitialize->fenceVal)
		{
			HANDLE event = CreateEvent(nullptr, false, false, nullptr);
			dxInitialize->fence->SetEventOnCompletion(dxInitialize->fenceVal, event);
			WaitForSingleObject(event, INFINITE);
			CloseHandle(event);
		}

		//キューをクリア
		result = dxInitialize->commandAllocator->Reset();
		assert(SUCCEEDED(result));
		//再びコマンドリストをためる準備
		result = dxInitialize->commandList->Reset(dxInitialize->commandAllocator, nullptr);
		assert(SUCCEEDED(result));


		//DirecX毎フレーム　ここまで　　ー−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−ー−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−
		#pragma endregion	DirectX毎フレーム
	}
	
	delete dxInitialize;
	delete _input;

	return 0;
}
